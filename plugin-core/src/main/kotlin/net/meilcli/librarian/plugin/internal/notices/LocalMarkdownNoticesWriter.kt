package net.meilcli.librarian.plugin.internal.notices

import net.meilcli.librarian.plugin.LibrarianExtension
import net.meilcli.librarian.plugin.LibrarianPageExtension
import net.meilcli.librarian.plugin.entities.Notice
import net.meilcli.librarian.plugin.internal.IWriter
import org.gradle.api.Project
import java.io.File

class LocalMarkdownNoticesWriter(
    private val project: Project,
    private val extension: LibrarianExtension,
    private val page: LibrarianPageExtension
) : IWriter<List<Notice>> {

    override fun write(source: List<Notice>) {
        val sb = StringBuilder()
        sb.appendln("# ${page.title}")
        sb.appendln("*This markdown is auto generated by [Librarian](https://github.com/MeilCli/Librarian)*")
        sb.appendln()
        page.description?.also {
            sb.appendln(it)
            sb.appendln()
        }
        sb.appendln("## Using")
        sb.appendln("|Name|author|license|")
        sb.appendln("|:--|:--|:--|")
        for (notice in source) {
            for ((i, resource) in notice.resources.withIndex()) {
                if (i == 0) {
                    sb.appendln("|[${notice.name}](${notice.url})|${notice.author}|${resource.licenses.joinToString { "[${it.name}](${it.url})" }}|")
                } else {
                    sb.appendln("|||${resource.licenses.joinToString { "[${it.name}](${it.url})" }}|")
                }
            }
        }

        val outputDirectory = File(project.rootProject.rootDir, "${extension.dataFolderName}/${page.name}")
        if (outputDirectory.exists().not()) {
            outputDirectory.mkdirs()
        }

        val outputFile = File(outputDirectory, page.markdownFileName)
        outputFile.writeText(sb.toString(), Charsets.UTF_8)
    }
}