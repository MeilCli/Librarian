import net.meilcli.librarian.gradle.dependencies.*

buildscript {
    ext.local_build = false
    repositories {
        google()
        jcenter()
        maven { url Repositories.gradle }
        def githubUser = System.getenv("GITHUB_USER")
        def githubToken = System.getenv("GITHUB_TOKEN")
        if (githubUser != null && githubToken != null) {
            maven {
                url "https://maven.pkg.github.com/MeilCli/Librarian"
                credentials {
                    username githubUser
                    password githubToken
                }
            }
        } else {
            maven { url Repositories.librarian }
        }
    }
    dependencies {
        classpath Android.gradle
        classpath Kotlin.gradle
        classpath KotlinSerialization.gradle
        classpath Bintray.plugin
        classpath Detekt.gradle
        if (local_build) {
            classpath fileTree(dir: 'libs', include: ['*.jar'])
            classpath KotlinSerialization.runtime
            classpath XmlUtil.core
            classpath XmlUtil.serialization
            classpath SquareUp.okio
            classpath SquareUp.okhttp
            classpath SquareUp.retrofit
            classpath JakeWharton.retrofitKotlinSerializationConverter
        } else {
            classpath Librarian.pluginCore
        }
        classpath Librarian.pluginPreset // cannot use local jar
        classpath Gmazzo.gradleBuildConfigPlugin
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url Repositories.gradle }
        maven { url Repositories.retekt }
        def githubUser = System.getenv("GITHUB_USER")
        def githubToken = System.getenv("GITHUB_TOKEN")
        if (githubUser != null && githubToken != null) {
            maven {
                url "https://maven.pkg.github.com/MeilCli/Librarian"
                credentials {
                    username githubUser
                    password githubToken
                }
            }
        } else {
            maven { url Repositories.librarian }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
